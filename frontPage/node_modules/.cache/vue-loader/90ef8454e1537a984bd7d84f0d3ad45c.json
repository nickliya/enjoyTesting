{"remainingRequest":"/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/src/views/UIlist.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/src/views/UIlist.vue","mtime":1600912667857},{"path":"/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/node_modules/cache-loader/dist/cjs.js","mtime":1600912359670},{"path":"/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/node_modules/babel-loader/lib/index.js","mtime":1600912349814},{"path":"/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/node_modules/cache-loader/dist/cjs.js","mtime":1600912359670},{"path":"/Users/yangqing/Workspace/DEV/TestHomeForTS/test-home/node_modules/vue-loader/lib/index.js","mtime":1600912725450}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Tree, Input, Button } from 'ant-design-vue';\nimport { T5treeData } from '../assets/jsonData/t5_ui.js';\nimport { chjtreeData } from '../assets/jsonData/chj_ui.js';\nimport { A39treeData } from '../assets/jsonData/a39_ui.js';\nimport { A12treeData } from '../assets/jsonData/a12_ui.js';\n\nvar UItreeData = T5treeData\n// console.log(treeData)\n\n/*\n初始化数据列表，添加scoplots\n*/\nconst initList = (data) => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i]\n    node['scopedSlots'] = { title: 'title' }\n    if (node.children) {\n      initList(node.children)\n    }\n  }\n}\ninitList(UItreeData)\n\n/*\n构建一个数据列表，用于后面的数据筛选\n*/\nvar dataList = []\n\nconst generateList = (data, prekey) => {\n  const preKey = prekey || '0'\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i]\n    const key = `${preKey}-${i}`\n    const titlestr = node.title\n    dataList.push({ key, title: titlestr })\n    if (node.children) {\n      generateList(node.children, key)\n    }\n  }\n}\ngenerateList(UItreeData)\n\n/*\n获取传入列表的父级元素，字符串截取舍弃最后两位\n*/\nconst getParentKey = (key, tree) => {\n  let parentKey\n  parentKey = key.slice(0,-2)\n  return parentKey\n}\n\nexport default {\n  data () {\n    return {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true,\n      UItreeData,\n    }\n  },\n  components: {\n  'a-tree': Tree,\n  'a-input-search': Input,\n  'a-button': Button,\n  'a-button-group': Button.Group\n  },\n  methods: {\n    onExpand (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    onChange (e) {\n      const value = e.target.value\n      console.log(value)\n      var NewexpandedKeys = dataList.map((item) => {\n        if (value == \"\") {\n          // 如果传入的值是空，那么就收回所有扩展\n          return null\n        }\n        if (item.title.indexOf(value) > -1) {\n          // console.log(item.title.indexOf(value))\n          return getParentKey(item.key, dataList)\n        }\n        return null\n      }) // 筛选\n      NewexpandedKeys = NewexpandedKeys.filter((item, i, self) => item && self.indexOf(item) === i) //去重\n      Object.assign(this, {\n        expandedKeys: NewexpandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n    },\n    changeData (e) {\n      const value = e.target.id\n      switch(value){\n        case 'chj':\n          return new Promise((resolve) => { //异步加载解决渲染问题\n            this.UItreeData = chjtreeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData)\n            generateList(this.UItreeData)\n            // resolve()\n            // return\n          })\n        case 'T5':\n          return new Promise((resolve) => {\n            this.UItreeData = T5treeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData)\n            generateList(this.UItreeData)\n            // resolve()\n            // return\n          })\n        case 'A39':\n          return new Promise((resolve) => {\n            this.UItreeData = A39treeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData) \n            generateList(this.UItreeData)\n          })\n        case 'A12':\n          return new Promise((resolve) => {\n            this.UItreeData = A12treeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData) \n            generateList(this.UItreeData)\n          })\n      }\n    }\n  },\n}\n",{"version":3,"sources":["UIlist.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UIlist.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <a-input-search style=\"margin-bottom: 8px\" placeholder=\"Search\" @change=\"onChange\" />\n    <a-button-group>\n      <a-button id='A39' @click=\"changeData\" type='primary'>A39</a-button>\n      <a-button id='T5' @click=\"changeData\" type='primary'>T5</a-button>\n      <a-button id='chj' @click=\"changeData\" type='primary'>车和家</a-button>\n      <a-button id='A12' @click=\"changeData\" type='primary'>A12</a-button>\n    </a-button-group>\n    <a-tree\n      @expand=\"onExpand\"\n      :expandedKeys=\"expandedKeys\"\n      :autoExpandParent=\"autoExpandParent\"\n      :treeData=\"UItreeData\"\n      >\n      <template slot=\"title\" slot-scope=\"{title}\">\n        <span v-if=\"title.indexOf(searchValue) > -1\">\n          {{title.substr(0, title.indexOf(searchValue))}}\n          <span style=\"color: #f50\">{{searchValue}}</span>\n          {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\n        </span>\n        <span v-else>{{title}}</span>\n      </template>\n    </a-tree>\n  </div>\n</template>\n\n<script>\nimport { Tree, Input, Button } from 'ant-design-vue';\nimport { T5treeData } from '../assets/jsonData/t5_ui.js';\nimport { chjtreeData } from '../assets/jsonData/chj_ui.js';\nimport { A39treeData } from '../assets/jsonData/a39_ui.js';\nimport { A12treeData } from '../assets/jsonData/a12_ui.js';\n\nvar UItreeData = T5treeData\n// console.log(treeData)\n\n/*\n初始化数据列表，添加scoplots\n*/\nconst initList = (data) => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i]\n    node['scopedSlots'] = { title: 'title' }\n    if (node.children) {\n      initList(node.children)\n    }\n  }\n}\ninitList(UItreeData)\n\n/*\n构建一个数据列表，用于后面的数据筛选\n*/\nvar dataList = []\n\nconst generateList = (data, prekey) => {\n  const preKey = prekey || '0'\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i]\n    const key = `${preKey}-${i}`\n    const titlestr = node.title\n    dataList.push({ key, title: titlestr })\n    if (node.children) {\n      generateList(node.children, key)\n    }\n  }\n}\ngenerateList(UItreeData)\n\n/*\n获取传入列表的父级元素，字符串截取舍弃最后两位\n*/\nconst getParentKey = (key, tree) => {\n  let parentKey\n  parentKey = key.slice(0,-2)\n  return parentKey\n}\n\nexport default {\n  data () {\n    return {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true,\n      UItreeData,\n    }\n  },\n  components: {\n  'a-tree': Tree,\n  'a-input-search': Input,\n  'a-button': Button,\n  'a-button-group': Button.Group\n  },\n  methods: {\n    onExpand (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    onChange (e) {\n      const value = e.target.value\n      console.log(value)\n      var NewexpandedKeys = dataList.map((item) => {\n        if (value == \"\") {\n          // 如果传入的值是空，那么就收回所有扩展\n          return null\n        }\n        if (item.title.indexOf(value) > -1) {\n          // console.log(item.title.indexOf(value))\n          return getParentKey(item.key, dataList)\n        }\n        return null\n      }) // 筛选\n      NewexpandedKeys = NewexpandedKeys.filter((item, i, self) => item && self.indexOf(item) === i) //去重\n      Object.assign(this, {\n        expandedKeys: NewexpandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n    },\n    changeData (e) {\n      const value = e.target.id\n      switch(value){\n        case 'chj':\n          return new Promise((resolve) => { //异步加载解决渲染问题\n            this.UItreeData = chjtreeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData)\n            generateList(this.UItreeData)\n            // resolve()\n            // return\n          })\n        case 'T5':\n          return new Promise((resolve) => {\n            this.UItreeData = T5treeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData)\n            generateList(this.UItreeData)\n            // resolve()\n            // return\n          })\n        case 'A39':\n          return new Promise((resolve) => {\n            this.UItreeData = A39treeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData) \n            generateList(this.UItreeData)\n          })\n        case 'A12':\n          return new Promise((resolve) => {\n            this.UItreeData = A12treeData\n            this.expandedKeys = []\n            dataList = []\n            initList(this.UItreeData) \n            generateList(this.UItreeData)\n          })\n      }\n    }\n  },\n}\n</script>\n\n"]}]}